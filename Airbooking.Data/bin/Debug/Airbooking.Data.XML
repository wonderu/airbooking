<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Airbooking.Data</name>
    </assembly>
    <members>
        <member name="T:Airbooking.Data.Infrastructure.DbFactory">
            <summary>
            Database factory class
            </summary>
            <seealso cref="T:Airbooking.Data.Infrastructure.Disposable" />
            <seealso cref="T:Airbooking.Data.Infrastructure.IDbFactory" />
        </member>
        <member name="M:Airbooking.Data.Infrastructure.DbFactory.Init">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.DbFactory.DisposeCore">
            <summary>
            Disposes the core.
            </summary>
        </member>
        <member name="T:Airbooking.Data.Infrastructure.Disposable">
            <summary>
            Disposable helper class
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Airbooking.Data.Infrastructure.Disposable.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Airbooking.Data.Infrastructure.Disposable"/> class.
            </summary>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.Disposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.Disposable.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.Disposable.DisposeCore">
            <summary>
            Disposes the core.
            </summary>
        </member>
        <member name="T:Airbooking.Data.Infrastructure.IDbFactory">
            <summary>
            Database factory interface
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Airbooking.Data.Infrastructure.IDbFactory.Init">
            <summary>
            Initializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Airbooking.Data.Infrastructure.IRepository`1">
            <summary>
            Repository interface
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.IRepository`1.Add(`0)">
            <summary>
            Adds the specified entity. Marks an entity as new
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.IRepository`1.Update(`0)">
            <summary>
            Updates the specified entity. Marks an entity as modified
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.IRepository`1.Delete(`0)">
            <summary>
            Deletes the specified entity. Marks an entity to be removed
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.IRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Deletes according to the specified expression.
            </summary>
            <param name="where">The expression.</param>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.IRepository`1.GetById(System.Int32)">
            <summary>
            Gets the entity by identifier.
            </summary>
            <param name="id">The identifier.</param>
            <returns>The entity</returns>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.IRepository`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets an entity using delegate.
            </summary>
            <param name="where">The expression.</param>
            <returns>The entity</returns>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.IRepository`1.GetAll">
            <summary>
            Gets all entities of type T.
            </summary>
            <returns>The list of entities</returns>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.IRepository`1.GetMany(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets entities using delegate.
            </summary>
            <param name="where">The expression.</param>
            <returns>The list of entities</returns>
        </member>
        <member name="T:Airbooking.Data.Infrastructure.IUnitOfWork">
            <summary>
            Unit of work interface
            </summary>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.IUnitOfWork.Commit">
            <summary>
            Commits the changes.
            </summary>
        </member>
        <member name="T:Airbooking.Data.Infrastructure.RepositoryBase`1">
            <summary>
            Repository base
            </summary>
            <typeparam name="T">Entity class</typeparam>
        </member>
        <member name="P:Airbooking.Data.Infrastructure.RepositoryBase`1.DbFactory">
            <summary>
            Gets the database factory.
            </summary>
            <value>
            The database factory.
            </value>
        </member>
        <member name="P:Airbooking.Data.Infrastructure.RepositoryBase`1.DbContext">
            <summary>
            Gets the database context.
            </summary>
            <value>
            The database context.
            </value>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.RepositoryBase`1.#ctor(Airbooking.Data.Infrastructure.IDbFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Airbooking.Data.Infrastructure.RepositoryBase`1" /> class.
            </summary>
            <param name="dbFactory">The database factory.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.RepositoryBase`1.Add(`0)">
            <summary>
            Adds the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.RepositoryBase`1.Update(`0)">
            <summary>
            Updates the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.RepositoryBase`1.Delete(`0)">
            <summary>
            Deletes the specified entity.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.RepositoryBase`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Deletes according the specified expression.
            </summary>
            <param name="where">The expression.</param>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.RepositoryBase`1.GetById(System.Int32)">
            <summary>
            Gets the entity by identifier.
            </summary>
            <param name="id">The entity identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.RepositoryBase`1.GetAll">
            <summary>
            Gets all entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.RepositoryBase`1.GetMany(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the many entities.
            </summary>
            <param name="where">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.RepositoryBase`1.Get(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Gets the entity according specified expression.
            </summary>
            <param name="where">The expression.</param>
            <returns></returns>
        </member>
        <member name="T:Airbooking.Data.Infrastructure.UnitOfWork">
            <summary>
            Unit of work
            </summary>
            <seealso cref="T:Airbooking.Data.Infrastructure.IUnitOfWork" />
        </member>
        <member name="M:Airbooking.Data.Infrastructure.UnitOfWork.#ctor(Airbooking.Data.Infrastructure.IDbFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Airbooking.Data.Infrastructure.UnitOfWork" /> class.
            </summary>
            <param name="dbFactory">The database factory interface.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Airbooking.Data.Infrastructure.UnitOfWork.DbContext">
            <summary>
            Gets the database context.
            </summary>
            <value>
            The database context.
            </value>
        </member>
        <member name="M:Airbooking.Data.Infrastructure.UnitOfWork.Commit">
            <summary>
            Commits the changes.
            </summary>
        </member>
        <member name="T:Airbooking.Data.Repositories.AirportRepository">
            <summary>
            Airport Repository Class
            </summary>
        </member>
        <member name="M:Airbooking.Data.Repositories.AirportRepository.#ctor(Airbooking.Data.Infrastructure.IDbFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Airbooking.Data.Repositories.AirportRepository"/> class.
            </summary>
            <param name="dbFactory">The database factory.</param>
        </member>
        <member name="M:Airbooking.Data.Repositories.AirportRepository.GetAirportByCode(System.String)">
            <summary>
            Gets the airport by code.
            </summary>
            <param name="code">The code.</param>
            <returns>Airport</returns>
        </member>
        <member name="T:Airbooking.Data.Repositories.IAirportRepository">
            <summary>
            Airport Repository Interface
            </summary>
        </member>
        <member name="M:Airbooking.Data.Repositories.IAirportRepository.GetAirportByCode(System.String)">
            <summary>
            Gets the airport by code.
            </summary>
            <param name="code">The code.</param>
            <returns></returns>
        </member>
        <member name="T:Airbooking.Data.Repositories.BookingRepository">
            <summary>
            Booking Repository Class
            </summary>
        </member>
        <member name="M:Airbooking.Data.Repositories.BookingRepository.#ctor(Airbooking.Data.Infrastructure.IDbFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Airbooking.Data.Repositories.BookingRepository"/> class.
            </summary>
            <param name="dbFactory">The database factory.</param>
        </member>
        <member name="M:Airbooking.Data.Repositories.BookingRepository.GetById(System.Int32)">
            <summary>
            Gets the entity by identifier.
            </summary>
            <param name="id">The entity identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Airbooking.Data.Repositories.BookingRepository.AddBookingAndCommit(Airbooking.Model.Booking)">
            <summary>
            Adds the booking and commits.
            </summary>
            <param name="booking">The booking.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Airbooking.Data.Repositories.IBookingRepository">
            <summary>
            Booking Reporitory Interface
            </summary>
        </member>
        <member name="M:Airbooking.Data.Repositories.IBookingRepository.AddBookingAndCommit(Airbooking.Model.Booking)">
            <summary>
            Adds the booking and commits.
            </summary>
            <param name="booking">The booking.</param>
            <returns></returns>
        </member>
        <member name="T:Airbooking.Data.Repositories.FlightScheduleRepository">
            <summary>
            Flight Schedule Repository class
            </summary>
        </member>
        <member name="M:Airbooking.Data.Repositories.FlightScheduleRepository.#ctor(Airbooking.Data.Infrastructure.IDbFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Airbooking.Data.Repositories.FlightScheduleRepository"/> class.
            </summary>
            <param name="dbFactory">The database factory.</param>
        </member>
        <member name="M:Airbooking.Data.Repositories.FlightScheduleRepository.GetFlightSchedules(System.String,System.String,System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the flight schedules.
            </summary>
            <param name="fromAirportCode">From airport code.</param>
            <param name="toAirportCode">To airport code.</param>
            <param name="date">The date.</param>
            <param name="adultCount">The adult count.</param>
            <param name="infantCount">The infant count.</param>
            <param name="childrenCount">The children count.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Date should be greater than today
            or
            Adults count should be in [1, 5]
            or
            Infants count should be in [0, 5]
            or
            Children count should be in [0, 5]</exception>
        </member>
        <member name="T:Airbooking.Data.Repositories.IFlightScheduleRepository">
            <summary>
            Flight Schedule Repository interface
            </summary>
        </member>
        <member name="M:Airbooking.Data.Repositories.IFlightScheduleRepository.GetFlightSchedules(System.String,System.String,System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the flight schedules.
            </summary>
            <param name="fromAirportCode">From airport code.</param>
            <param name="toAirportCode">To airport code.</param>
            <param name="date">The date.</param>
            <param name="adultCount">The adult count.</param>
            <param name="infantCount">The infant count.</param>
            <param name="childrenCount">The children count.</param>
            <returns></returns>
        </member>
        <member name="T:Airbooking.Data.AirbookingEntities">
            <summary>
            Airbooking database context
            </summary>
            <seealso cref="T:System.Data.Entity.DbContext" />
        </member>
        <member name="M:Airbooking.Data.AirbookingEntities.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Airbooking.Data.AirbookingEntities"/> class.
            </summary>
        </member>
        <member name="P:Airbooking.Data.AirbookingEntities.Airports">
            <summary>
            Gets or sets the airports.
            </summary>
            <value>
            The airports.
            </value>
        </member>
        <member name="P:Airbooking.Data.AirbookingEntities.Airplanes">
            <summary>
            Gets or sets the airplanes.
            </summary>
            <value>
            The airplanes.
            </value>
        </member>
        <member name="P:Airbooking.Data.AirbookingEntities.Tickets">
            <summary>
            Gets or sets the tickets.
            </summary>
            <value>
            The tickets.
            </value>
        </member>
        <member name="P:Airbooking.Data.AirbookingEntities.Bookings">
            <summary>
            Gets or sets the bookings.
            </summary>
            <value>
            The bookings.
            </value>
        </member>
        <member name="P:Airbooking.Data.AirbookingEntities.Passengers">
            <summary>
            Gets or sets the passengers.
            </summary>
            <value>
            The passengers.
            </value>
        </member>
        <member name="P:Airbooking.Data.AirbookingEntities.Flights">
            <summary>
            Gets or sets the flights.
            </summary>
            <value>
            The flights.
            </value>
        </member>
        <member name="P:Airbooking.Data.AirbookingEntities.Seats">
            <summary>
            Gets or sets the seats.
            </summary>
            <value>
            The seats.
            </value>
        </member>
        <member name="P:Airbooking.Data.AirbookingEntities.FlightSchedules">
            <summary>
            Gets or sets the flight schedules.
            </summary>
            <value>
            The flight schedules.
            </value>
        </member>
        <member name="M:Airbooking.Data.AirbookingEntities.Create">
            <summary>
            Creates this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Airbooking.Data.AirbookingEntities.Commit">
            <summary>
            Commits the changes.
            </summary>
        </member>
        <member name="M:Airbooking.Data.AirbookingEntities.OnModelCreating(System.Data.Entity.DbModelBuilder)">
            <summary>
            This method is called when the model for a derived context has been initialized, but
            before the model has been locked down and used to initialize the context.  The default
            implementation of this method does nothing, but it can be overridden in a derived class
            such that the model can be further configured before it is locked down.
            </summary>
            <param name="modelBuilder">The builder that defines the model for the context being created.</param>
            <remarks>
            Typically, this method is called only once when the first instance of a derived context
            is created.  The model for that context is then cached and is for all further instances of
            the context in the app domain.  This caching can be disabled by setting the ModelCaching
            property on the given ModelBuidler, but note that this can seriously degrade performance.
            More control over caching is provided through use of the DbModelBuilder and DbContextFactory
            classes directly.
            </remarks>
        </member>
        <member name="T:Airbooking.Data.AirbookingSeedData">
            <summary>
            Airbooking seed data class
            </summary>
        </member>
        <member name="M:Airbooking.Data.AirbookingSeedData.Seed(Airbooking.Data.AirbookingEntities)">
            <summary>
            A method that should be overridden to actually add data to the context for seeding.
            The default implementation does nothing.
            </summary>
            <param name="context">The context to seed.</param>
        </member>
    </members>
</doc>
